<?php

namespace ByExample\DemoBundle\Repository;

use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\EntityRepository;
use ByExample\DemoBundle\Entity\Genre;
use Doctrine\ORM\Query;


/**
 * GenreRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GenreRepository extends EntityRepository
{
	public function findAll()
    {
        $rsm = new ResultSetMapping($em);
        $rsm->addEntityResult('ByExampleDemoBundle:Genre','g');
        $rsm->addScalarResult('id','id');
        $rsm->addScalarResult('libelle','libelle');
        $rsm->addScalarResult('urlCover', 'urlCover');

        $this->_em->flush();
        $this->_em->clear();

        $query = $this->_em->createNativeQuery('SELECT g.* FROM genre g', $rsm);
        $genre = $query->getResult();
        return $genre;
    }


		public function addGenre($artiste, $infos){

			$new = [];
			$repository = $this->_em->getRepository('ByExampleDemoBundle:Genre');

			$repoArtiste = $this->_em->getRepository('ByExampleDemoBundle:Artiste');
		
			$informa=array();


			foreach($infos["terms"] as $info){			
				$genre=$info;
				$genres = $repository->findByLibelle($genre["name"]);
				if(!$genres){
					$newGenre=new Genre();
					$newGenre->setLibelle($genre["name"]);
					$newGenre->addIdartiste($artiste);
					$newGenre->setUrlCover($artiste->getUrlcover());
					//array_push($informa, $newGenre);
					$this->_em->persist($newGenre);
					$this->_em->flush();
					$idGenre = $newGenre->getId();
				}
				else{
					$idGenre = $genres[0]->getId();
				}
				$conn = $this->_em->getConnection();
				$query = $this->_em->createQuery('SELECT ag FROM ByExampleDemoBundle:Artistegenre ag WHERE ag.idartiste=:id AND ag.idgenre =:idgenre')
           		->setParameter("id",$artiste->getId())
            	->setParameter("idgenre",$idGenre);
				$asso = $query->getResult(Query::HYDRATE_OBJECT);
				if(!$asso){
				    $tag = $conn->insert("artistegenre", array("idGenre"=>$idGenre, "idArtiste"=>$artiste->getId(), "frequency"=>$genre["frequency"], "weight"=>$genre["weight"]));
				}	
			}
	}

		public function findGenreByKey($key){
			 $key = "%".$key."%";
			$query=$this->_em->createQuery("SELECT g.id, g.libelle FROM ByExampleDemoBundle:Genre g 
				WHERE g.libelle LIKE :key
				")->setParameter("key",$key);
			$genres=$query->getResult(Query::HYDRATE_ARRAY);
			return $genres;
		}
}
