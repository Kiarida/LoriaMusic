<?php

namespace ByExample\DemoBundle\Repository;

use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\EntityRepository;
use ByExample\DemoBundle\Entity\Item;
use ByExample\DemoBundle\Entity\gsAPI;
use ByExample\DemoBundle\Entity\Artiste;
use Doctrine\ORM\Query;
use \DateTime;

/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends EntityRepository
{
	public function findItemsBySearchKey($key){
        $key = "%".$key."%";

		$query = $this->_em->createQuery('SELECT partial i.{id,url,titre,note,duree,typeitem,nbvues,date,urlCover,urlPoster}, partial a.{id,nom}, partial alb.{id,titre}
                                            FROM ByExampleDemoBundle:Item i LEFT JOIN i.idartiste a LEFT JOIN i.idalbum alb
                                            WHERE i.titre LIKE :key')
        ->setParameter('key', $key);
        $items = $query->getResult(Query::HYDRATE_ARRAY);
        return $items;
	}

    public function findItemsByPopularity($days, $limit){
        $query = $this->_em->createQuery(
        'SELECT partial i.{id, titre, note, url, urlCover}, partial alb.{id, titre}, partial a.{id, nom} FROM ByExampleDemoBundle:Item i LEFT JOIN i.idartiste a LEFT JOIN i.idalbum alb, ByExampleDemoBundle:Ecoute e
        WHERE e.iditem = i.id AND (e.date > :before) AND i.typeitem=1 GROUP BY i.id ORDER BY i.nbvues DESC')
        ->setParameter('before', new \DateTime('-'.$days.' days'))
        ->setMaxResults($limit);
        $items = $query->getResult(Query::HYDRATE_ARRAY);
        return $items;
    }

    public function findTagsByItem($idItem){
        $query = $this->_em->createQuery(
        'SELECT t.id, t.libelle, nt.note
        FROM ByExampleDemoBundle:Tag t, ByExampleDemoBundle:NoteTagItem nt
        WHERE t.id = nt.idtag
        AND nt.iditem= :idItem')
        ->setParameter('idItem', $idItem);
        $items = $query->getResult();
        return $items;
    }

    public function findRandomItemByGenre($idGenre){
        $rows = $this->_em->createQuery('SELECT COUNT(i.id) FROM ByExampleDemoBundle:Item i LEFT JOIN i.idartiste a LEFT JOIN a.idgenre g WHERE i.typeitem=1 AND g.id=:key')->setParameter('key', $idGenre)->getSingleScalarResult(); 
        $offset = max(0, rand(0, $rows - 1));
        $query = $this->_em->createQuery('SELECT partial i.{id,url,titre,note,duree,typeitem, urlCover}, partial a.{id,nom}, partial alb.{id,titre}
                                            FROM ByExampleDemoBundle:Item i LEFT JOIN i.idartiste a LEFT JOIN i.idalbum alb LEFT JOIN a.idgenre g
                                            WHERE g.id = :key AND i.typeitem=1')
        ->setParameter('key', $idGenre)
        ->setMaxResults(1)
        ->setFirstResult($offset);
        $item = $query->getResult(Query::HYDRATE_ARRAY);
        return $item;
    }

    public function findRandomItemByArtiste($idArtiste){
        $rows = $this->_em->createQuery('SELECT COUNT(i.id) FROM ByExampleDemoBundle:Item i LEFT JOIN i.idartiste g WHERE i.typeitem=1 AND g.id=:key')->setParameter('key', $idArtiste)->getSingleScalarResult();
        $offset = max(0, rand(0, $rows - 1));
        $query = $this->_em->createQuery('SELECT partial i.{id,url,titre,note,duree,typeitem, urlCover}, partial a.{id,nom}, partial alb.{id,titre}
                                            FROM ByExampleDemoBundle:Item i LEFT JOIN i.idartiste a LEFT JOIN i.idalbum alb
                                            WHERE a.id = :key AND i.typeitem=1')
        ->setParameter('key', $idArtiste)
        ->setMaxResults(1)
        ->setFirstResult($offset);
        $item = $query->getResult(Query::HYDRATE_ARRAY);
        return $item;
    }

    public function findItemByAction($id, $id_action){
        $rsm = new ResultSetMapping($em);
        $rsm->addEntityResult('ByExampleDemoBundle:Item','i');
        $rsm->addEntityResult('ByExampleDemoBundle:Actions','a');
        $rsm->addEntityResult('ByExampleDemoBundle:Artiste','b');
        $rsm->addScalarResult('nom','nom');
        $rsm->addScalarResult('idUtilisateur','idUtilisateur');
        $rsm->addScalarResult('idArtiste','idArtiste');
        $rsm->addScalarResult('id','id');
        $rsm->addScalarResult('url','url');
        $rsm->addScalarResult('titre','titre');
        $rsm->addScalarResult('note','note');
        $rsm->addScalarResult('duree','duree');
        $rsm->addScalarResult('typeItem','typeItem');
        $rsm->addScalarResult('nbVues','nbVues');
        $rsm->addScalarResult('date','date');
        $this->_em->flush();
        $this->_em->clear();
        $query = $this->_em->createNativeQuery('SELECT i.*, z.idArtiste, a.idUtilisateur, b.nom FROM item i,actions a, artiste b, itemartiste z
        WHERE a.idTypeAction = ?
        AND z.idItem = i.id AND b.id = z.idArtiste
        AND i.id = a.idItem AND a.idUtilisateur = ?', $rsm);
        $query->setParameter(1, $id_action);
        $query->setParameter(2, $id);
        $items = $query->getResult();
        return $items;
    }

    public function findItemByAlbum($idalbum){
		$query = $this->_em->createQuery('SELECT i, partial r.{id, nom} FROM ByExampleDemoBundle:Item i JOIN i.idalbum a JOIN i.idartiste r WHERE a = :idalbum')->setParameter('idalbum', $idalbum);
		$items = $query->getResult(Query::HYDRATE_ARRAY);
        return $items;
    }

    public function findAlbumByArtist($idArtiste){
        $query = $this->_em->createQuery('SELECT DISTINCT i FROM ByExampleDemoBundle:Item i, ByExampleDemoBundle:Item z JOIN z.idalbum b JOIN b.idartiste j WHERE b = i.id AND j.id = :idartiste')->setParameter('idartiste', $idArtiste);
        $albums =  $query->getResult(Query::HYDRATE_ARRAY);
        return $albums;
    }

        /*On va chercher tous les items qui n'ont pas d'urlCover, leur album et leur artiste*/
        public function findNewItemsAndArtists(){
            $query=$this->_em->createQuery('SELECT partial i.{id,titre}, partial a.{id,nom, urlCover}, partial alb.{id, titre, urlCover}
                                                    FROM ByExampleDemoBundle:Item i LEFT JOIN i.idartiste a LEFT JOIN i.idalbum alb
                                                    WHERE i.typeitem = 1 AND i.urlCover IS NULL');
                $items=$query->getResult(Query::HYDRATE_ARRAY);
                return $items;
        }

		public function findItemByArtist($idArtiste){
			$query = $this->_em->createQuery("SELECT i FROM ByExampleDemoBundle:Item i JOIN i.idartiste a WHERE i.typeitem=1 AND a=:idartiste")->setParameter("idartiste", $idArtiste);
			$items=$query->getResult(Query::HYDRATE_ARRAY);
			return $items;
		}

		public function updateView($idItem){
			$repository = $this->_em->getRepository('ByExampleDemoBundle:Item');
			$vue = $repository->find($idItem);
			$vues = $vue->getNbvues();
				$qb = $this->_em->createQueryBuilder();
				$q = $qb->update('ByExampleDemoBundle:Item', 'u')
					->set('u.nbvues', $vues+1)
					->where('u.id = ?1')
					->setParameter(1, $idItem)
					->getQuery();
					$p = $q->execute();
					return $vues;
		}

        public function findItemByArtistandName($titre, $idArtiste){
            $query = $this->_em->createQuery("SELECT partial i.{id, url, titre, note, duree, date, urlCover}, partial alb.{id, titre}, partial a.{id, nom} FROM ByExampleDemoBundle:Item i JOIN i.idartiste a LEFT JOIN i.idalbum alb WHERE i.typeitem=1 AND a=:idartiste AND i.titre=:titre")->setParameter("idartiste", $idArtiste)->setParameter("titre", $titre);
            $items=$query->getResult(Query::HYDRATE_ARRAY);
            return $items;
        }

         public function findAlbumByArtistandName($titre, $idArtiste){
            $query = $this->_em->createQuery("SELECT partial i.{id, url, titre, note, duree, date, urlCover} FROM ByExampleDemoBundle:Item i JOIN i.idartiste a WHERE i.typeitem=2 AND a=:idartiste AND i.titre=:titre")->setParameter("idartiste", $idArtiste)->setParameter("titre", $titre);
            $items=$query->getResult(Query::HYDRATE_ARRAY);
            return $items;
        }

        public function addItemArtiste($url, $titre, $nomAlbum, $nom, $duration){
            $repository = $this->_em->getRepository('ByExampleDemoBundle:Item');
            $repoArtiste = $this->_em->getRepository('ByExampleDemoBundle:Artiste');
            $singer=$repoArtiste->findOneByNom($nom);
            //Si l'artiste existe déjà, on va regarder si l'item existe déjà
            if($singer){
                $idArtiste=$singer->getId();
                 $vue = $repository->findItemByArtistandName($titre, $idArtiste);
                 $alb = $repository->findAlbumByArtistandName($nomAlbum, $idArtiste);
                 if($vue){
                    //Si l'item existe déjà, on va le retourner
                    return $vue;
                 }
                 //on regarde aussi si l'album existe
                    if($alb){
                          $idAlbum=$alb[0]["id"];
                          
                      }
                      else{
                        $album = new Item();
                        $album->setUrl("");
                        $album->setTitre($nomAlbum);
                        $album->setTypeItem(2);
                        $album->setNote(0);
                        $album->setDuree(0);
                        $album->setNbvues(0);
                        $album->setDate(new Datetime());
                        $this->_em->persist($album);
                        $this->_em->flush();
                        $idAlbum = $album->getId();
                        $conn = $this->_em->getConnection();
                        $conn->insert("itemartiste", array("idItem"=>$idAlbum, "idArtiste"=>$idArtiste));
                     }
                 if(!$vue){ //Sinon on le créé
                    $item = new Item();
                    $item->setUrl($url);
                    $item->setTitre($titre);
                    $item->setTypeItem(1);
                    $item->setNote(0);
                    $item->setDuree($duration);
                    $item->setNbvues(0);
                    $item->setDate(new Datetime());
                
                    $success = $this->_em->persist($item);
                    $this->_em->flush();

                    $idItem = $item->getId();
                   
                    $conn = $this->_em->getConnection();
                    $conn->insert("itemartiste", array("idItem"=>$idItem, "idArtiste"=>$idArtiste));
                    $conn->insert("itemitem", array("idItem"=>$idItem, "idAlbum"=>$idAlbum));
                }
             }
             else{
                $item = new Item();
                $item->setUrl($url);
                $item->setTitre($titre);
                $item->setTypeItem(1);
                $item->setNote(0);
                $item->setDuree($duration);
                $item->setNbvues(0);
                $item->setDate(new Datetime());
                //$item->setIdArtiste($idArtiste);

                $album = new Item();
                $album->setUrl("");
                $album->setTitre($nomAlbum);
                $album->setTypeItem(2);
                $album->setNote(0);
                $album->setDuree(0);
                $album->setNbvues(0);
                $album->setDate(new Datetime());

                $artiste = new Artiste();
                $artiste->setNom($nom);
                $artiste->setNote(0);


                $this->_em->persist($artiste);
                $this->_em->persist($album);
                $this->_em->persist($item);
                $this->_em->flush();

                $idItem = $item->getId();
                $idAlbum = $album->getId();
                $idArtiste = $artiste->getId();

                $conn = $this->_em->getConnection();
                $conn->insert("itemartiste", array("idItem"=>$idItem, "idArtiste"=>$idArtiste));
                $conn->insert("itemartiste", array("idItem"=>$idAlbum, "idArtiste"=>$idArtiste));
                $conn->insert("itemitem", array("idItem"=>$idItem, "idAlbum"=>$idAlbum));
            }
           


            return $item=$repository->findItemByArtistandName($titre, $idArtiste);;
        }

        public function getAlbumLastFM($artist, $album, $item){
            $params = array("artist" => $artist, "album" => $album[0]["titre"], "format" => "json");

            $url="http://ws.audioscrobbler.com/2.0/?method=album.getinfo&api_key=30c3c9603ff7e5fba386bf8348abdb46";
            $url .= '&' . http_build_query($params);
            $ch = curl_init();
            curl_setopt ($ch, CURLOPT_HTTPHEADER, array ('Accept: application/json'));
            curl_setopt($ch, CURLOPT_URL, $url );
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            $info=curl_exec($ch);
            $date = new Datetime();
            $infodecode = json_decode($info, true);
            if($infodecode["album"]["releasedate"] && $infodecode["album"]["releasedate"] != "    " ){
                //$date = new Datetime($infodecode["album"]["releasedate"]);
                $date = explode(",", $infodecode["album"]["releasedate"]);
                $date = explode("    ", $date[0]);
                $date = date_create_from_format('d M Y', $date[1]);
            }
            $cover=$infodecode["album"]["image"][4]["#text"];
            $query = $this->_em->createQuery('UPDATE ByExampleDemoBundle:Item i SET i.date=:d, i.urlCover =:cover WHERE i.id=:id')
            ->setParameter("d",$date)
            ->setParameter("cover",$cover)
            ->setParameter("id",$album[0]["id"]);
            $result=$query->getResult();

            $cover="'".$infodecode["album"]["image"][4]["#text"]."'";
            $qb = $this->_em->createQueryBuilder();
                $q = $qb->update('ByExampleDemoBundle:Item', 'u')
                    ->set('u.urlCover',$cover)
                    ->where('u.id = ?1')
                    ->setParameter(1, $item)
                    ->getQuery();
                    $p = $q->execute();

            //return $infodecode; 
        }

        public function findLastItemBySession($id_session){
            $query=$this->_em->createQuery('SELECT partial e.{id}, partial i.{id, duree} FROM ByExampleDemoBundle:Ecoute e LEFT JOIN e.idsession s LEFT JOIN e.iditem i WHERE s.id=:session ORDER BY e.id DESC')
            ->setParameter("session", $id_session)
            ->setMaxResults(1);
            $item = $query->getResult(Query::HYDRATE_ARRAY);
            return $item;
        }

        public function findFormatItems($iditem){
            $query = $this->_em->createQuery('SELECT partial i.{id,url,titre,note,duree,typeitem,nbvues,date,urlCover,urlPoster}, partial a.{id,nom}, partial alb.{id,titre}
                                            FROM ByExampleDemoBundle:Item i LEFT JOIN i.idartiste a LEFT JOIN i.idalbum alb
                                            WHERE i.id = :key')
            ->setParameter('key', $iditem);
            $items = $query->getResult(Query::HYDRATE_ARRAY);
            return $items;
        }


}
