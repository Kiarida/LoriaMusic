<?php

namespace ByExample\DemoBundle\Repository;

use Doctrine\ORM\EntityRepository;
use ByExample\DemoBundle\Entity\Note;
use \DateTime;
/**
 * NoteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NoteRepository extends EntityRepository
{
    public function putNoteArtiste($idArtiste, $note, $idUtilisateur, $type){
        $repository = $this->_em->getRepository('ByExampleDemoBundle:Note');
        $noteObj = $repository->findNoteByArtisteAndUser($idArtiste,$idUtilisateur); //on recupere la note de l'utilisateur pour l'item

        if($noteObj){ //si elle existe
            $query = $this->_em->createQuery(
                'UPDATE ByExampleDemoBundle:Note n SET n.note = :note WHERE n.id=:idnote')
                ->setParameter('note', $note)
                ->setParameter('idnote', $noteObj);
            $note = $query->getResult();
        }   //si la note n'existe pas
        else{
            $repository = $this->_em->getRepository('ByExampleDemoBundle:Utilisateur');
            $utilisateur = $repository->find($idUtilisateur);
            $repository = $this->_em->getRepository('ByExampleDemoBundle:Artiste');
            $artiste = $repository->find($idArtiste);
            $newNote = new Note();
            $newNote->setNote($note);

            $newNote->setDate(new DateTime());
            $newNote->setIdutilisateur($utilisateur);
            $newNote->setIdartiste($artiste);
            $newNote->setType($type);
            $this->_em->persist($newNote);
            $this->_em->flush();
            $idNote = $newNote->getId();
        }
        //calcul de la moyenne
        $query = $this->_em->createQuery(
        'SELECT AVG(n.note) as moyenne From ByExampleDemoBundle:Note n WHERE n.idartiste=:idArtiste')
        ->setParameter('idArtiste', $idArtiste);
        $moyenne = $query->getResult();

        //update moyenne
        $query = $this->_em->createQuery(
                'UPDATE ByExampleDemoBundle:Artiste a SET a.note = :moyenne WHERE a.id= :idArtiste')
                ->setParameter('moyenne', $moyenne)
                ->setParameter('idArtiste', $idArtiste);
            $note = $query->getResult();

        return $note;
    }

	public function findNoteByArtiste($idArtiste)
	{

		$query = $this->_em->createQuery('SELECT a.note FROM ByExampleDemoBundle:Artiste a WHERE a.id = :idArtiste')
        ->setParameter('idArtiste', $idArtiste);
        $note = $query->getResult();
        return $note;
	}

    public function findNoteByItem($idItem)
    {

        $query = $this->_em->createQuery('SELECT i.note FROM ByExampleDemoBundle:Item i WHERE i.id = :idItem')
        ->setParameter('idItem', $idItem);
        $note = $query->getResult();
        return $note;
    }

    public function findNoteByArtisteAndUser($idArtiste, $idUser){
        $query = $this->_em->createQuery('SELECT n FROM ByExampleDemoBundle:Note n
            WHERE n.idartiste = :idArtiste AND n.idutilisateur=:idUser')
        ->setParameter('idArtiste', $idArtiste)->setParameter('idUser', $idUser);
        $note = $query->getResult();
        return $note;
    }

    public function findNoteByItemAndUser($idItem, $idUser){
        $query = $this->_em->createQuery('SELECT n FROM ByExampleDemoBundle:Note n
            WHERE n.iditem = :idItem AND n.idutilisateur=:idUser')
        ->setParameter('idItem', $idItem)->setParameter('idUser', $idUser);
        $note = $query->getResult();
        return $note;
    }

    public function putNote($idItem, $note, $idUtilisateur, $type){
        $repository = $this->_em->getRepository('ByExampleDemoBundle:Note');
        $noteObj = $repository->findNoteByItemAndUser($idItem,$idUtilisateur); //on recupere la note de l'utilisateur pour l'item

        if($noteObj){ //si elle existe
            $query = $this->_em->createQuery(
                'UPDATE ByExampleDemoBundle:Note n SET n.note = :note WHERE n.id=:idnote')
                ->setParameter('note', $note)
                ->setParameter('idnote', $noteObj);
            $note = $query->getResult();
        }   //si la note n'existe pas
        else{
            $repository = $this->_em->getRepository('ByExampleDemoBundle:Utilisateur');
            $utilisateur = $repository->find($idUtilisateur);
            $repository = $this->_em->getRepository('ByExampleDemoBundle:Item');
            $item = $repository->find($idItem);
            $newNote = new Note();
            $newNote->setNote($note);

            $newNote->setDate(new DateTime());
            $newNote->setIdutilisateur($utilisateur);
            $newNote->setIditem($item);
            $newNote->setType($type);
            $this->_em->persist($newNote);
            $this->_em->flush();
            $idNote = $newNote->getId();
        }
        //calcul de la moyenne
        $query = $this->_em->createQuery(
        'SELECT AVG(n.note) as moyenne From ByExampleDemoBundle:Note n WHERE n.iditem=:idItem')
        ->setParameter('idItem', $idItem);
        $moyenne = $query->getResult();

        //update moyenne
        $query = $this->_em->createQuery(
                'UPDATE ByExampleDemoBundle:Item i SET i.note = :moyenne WHERE i.id= :idItem')
                ->setParameter('moyenne', $moyenne)
                ->setParameter('idItem', $idItem);
            $note = $query->getResult();

        return $note;
    }

    public function addNoteTagItem($idTag, $idItem, $idUtilisateur, $param, $note_tag, $type){

  		$repository = $this->_em->getRepository('ByExampleDemoBundle:Note');
  		$notes = $repository->findByItemTagUser($idItem, $idTag, $idUtilisateur);
      if($param=="sub"){
        $noteMaj=0;
      }
      else if($param="add"){
        $noteMaj=1;
      }
      //Si la note existe déjà, on va la modifier
  		if($notes){

  			$note = $notes[0]["note"];
        if(($note == 1 && $param == "sub") || ($note == 0 && $param == "add")){

          $qb = $this->_em->createQueryBuilder();
    				$q = $qb->update('ByExampleDemoBundle:Note', 'u')
    					->set('u.note', $noteMaj)
    					->where('u.idtag = ?1')
    					->andWhere('u.iditem = ?2')
              ->andWhere('u.idutilisateur=?3')
    					->setParameter(1, $idTag)
    					->setParameter(2, $idItem)
              ->setParameter(3, $idUtilisateur)
    					->getQuery();
    					$p = $q->execute();
    					//return $note;
            }

        }
          //sinon, on va créer une nouvelle note
    			else{
    					$repository = $this->_em->getRepository('ByExampleDemoBundle:Utilisateur');
    					$utilisateur = $repository->find($idUtilisateur);
    					$repository = $this->_em->getRepository('ByExampleDemoBundle:Tag');
    					$tag = $repository->find($idTag);
    					$repository = $this->_em->getRepository('ByExampleDemoBundle:Item');
    					$item = $repository->find($idItem);
    					$newNote = new Note();
    					$newNote->setNote($noteMaj);
    					$newNote->setDate(new DateTime());
    					$newNote->setIdutilisateur($utilisateur);
    					$newNote->setIdtag($tag);
              $newNote->setIditem($item);
    					$newNote->setType($type);
    					$this->_em->persist($newNote);
    					$this->_em->flush();
    					$idNote = $newNote->getId();
    			}

        //calcul de la moyenne
        $query = $this->_em->createQuery(
        'SELECT AVG(n.note) as moyenne From ByExampleDemoBundle:Note n WHERE n.idtag=:idTag AND n.iditem=:idItem')
        ->setParameter('idTag', $idTag)
        ->setParameter('idItem', $idItem);
        $moyenne = $query->getResult();

        //update moyenne
        $conn = $this->_em->getConnection();
  			$noteUpdate = $conn->executeUpdate('UPDATE notetagitem SET note = ? WHERE iditem = ? AND idtag = ?', array($moyenne[0]["moyenne"], $idItem, $idTag));


        return $moyenne[0];


  		/*	$query=$this->_em->createQuery("SELECT partial a.{id}, t
  			FROM ByExampleDemoBundle:Tag a JOIN a.idnotetagitem t
  			WHERE t.iditem = :iditem AND t.idtag = :idtag")
  			->setParameter("iditem", $idItem)
  			->setParameter("idtag", $idTag);

  			$noteResult = $query->getSingleResult(Query::HYDRATE_ARRAY);
  			$note="";
  			$noteUpdate="";
  			if($noteResult){
  				$note =$noteResult["idnotetagitem"][0]["note"];


  			$conn = $this->_em->getConnection();
  			$noteUpdate = $conn->executeUpdate('UPDATE notetagitem SET note = ? WHERE iditem = ? AND idtag = ?', array($note, $idItem, $idTag));
  		}
  			return $noteUpdate;*/

  	}

    public function findByItemTagUser($idItem, $idTag, $idUser){
      $query = $this->_em->createQuery("SELECT n.note FROM ByExampleDemoBundle:Note n WHERE n.idutilisateur=:iduser AND n.iditem=:iditem AND n.idtag=:idtag")
      ->setParameter("iduser",$idUser)
      ->setParameter("idtag", $idTag)
      ->setParameter("iditem", $idItem);
      $note=$query->getResult();
      return $note;
    }

    public function getNoteTagItem($idItem, $idTag){
      $query=$this->_em->createQuery("SELECT n.note FROM ByExampleDemoBundle:Tag t JOIN t.idnotetagitem n WHERE n.iditem=:iditem AND n.idtag=:idtag")
      ->setParameter("idtag", $idTag)
      ->setParameter("iditem", $idItem);
      $note=$query->getResult();
      return $note;
    }
}
