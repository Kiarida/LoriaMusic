<?php

namespace ByExample\RecommandationsBundle\Repository;

use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\EntityRepository;
use ByExample\RecommandationsBundle\Entity\Algorithm;
use ByExample\RecommandationsBundle\Entity\TestUser;
use ByExample\RecommandationsBundle\Entity\Test;
use ByExample\RecommandationsBundle\Entity\Ordre;
use Doctrine\ORM\Query;
use \DateTime;

/**
 * Test
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TestRepository extends EntityRepository{

	public function createTest($label, $mode, $groups, $arrayAlgo){
		$this->closeTest();
        $repositoryOrder= $this->_em->getRepository('ByExampleRecommandationsBundle:Ordre');

        $arrayOrder = array();
                $test = new Test();
               
                $test->setDatedebut(new DateTime());
                $test->setLabel($label);
                $test->setMode($mode);
                $test->setGroups($groups);
                $repositoryGroup = $this->_em->getRepository('ByExampleRecommandationsBundle:Group');
                $arraygroups = $repositoryGroup->createGroup($groups);
                $this->_em->persist($test);
                $this->_em->flush();
                foreach ($arraygroups as $groupe => $users) { 
                    //return $arrayAlgo;
                       $setgroupe=$repositoryGroup->attributionGroup($test, $groupe, $users, $arrayAlgo[$groupe]);
                      //if($mode == "Same"){
                        
                        $neworders = $repositoryOrder->createOrder($users, $arrayAlgo[$groupe],$test);
                      //}
                       //return $setgroupe;
                       $test->addIdgroup($setgroupe);
                }

               


        	$this->_em->persist($test);
		$this->_em->flush();
		$idTest = $test->getId();

	    return $idTest;
	    //return $currentTest->getId();
	}




	public function createGroup($groups){
		$query = $this->_em->createQuery(
                'SELECT u.id
                FROM ByExampleDemoBundle:Utilisateur u 
                ');
                $count = $query->getResult(Query::HYDRATE_ARRAY);
                $nbUtil = count($count);
                $arrayGroup = [];
                for ($i =1; $i <= $groups; $i++) {
                	$arrayGroup[$i]=[];
                }
                $complete = false;
                $limite=$nbUtil/$groups;
                foreach ($count as $util) {
                	if($complete){
                		$limite = ($nbUtil/$groups)+1;
                	}
                	$result= rand(1, $groups);
                	while(count($arrayGroup[$result]) >= floor($limite)){
                		$result= rand(1, $groups);
                	}
                	array_push($arrayGroup[$result], $util);
                	$complete=true;
                	foreach($arrayGroup as $tableau){
                		if(count($tableau) != floor($limite)){
                			$complete=false;
                		}
                		
                	}
                }
                return $arrayGroup;
	}

	public function addGroups($test, $groups){
		$arrayTestUser=[];
		$repository = $this->_em->getRepository('ByExampleDemoBundle:Utilisateur');
		foreach ($groups as $group => $users) {
			foreach($users as $user){
				$testUser = new TestUser();
				$utilisateur = $repository->findOneById($user);
				$testUser->setIdutilisateur($utilisateur);
				$testUser->setIdtest($test);
				$testUser->setGroupe($group);
				$this->_em->persist($testUser);
				$this->_em->flush();
				$test->addIdtestuser($testUser);
				
				//array_push($arrayTestUser, $testUser);
			}
		}
        $this->_em->persist($test);
        $this->_em->flush();
	}

    //Réupère le test courant pour l'administrateur ou le test courant pour l'utilisateur
	public function currentTest($iduser){
        if($iduser != "false"){
            $query =$this->_em->createQuery(
                'SELECT t, g, a, o
                FROM ByExampleRecommandationsBundle:Test t
                LEFT JOIN t.idgroup g
                LEFT JOIN g.idalgorithm a
                LEFT JOIN g.idutilisateur u
                LEFT JOIN a.idordre o
                WHERE t.datefin is NULL 
                AND o.idutilisateur = u
                AND o.idtest = t.id
                AND u.id= :key
                ORDER BY o.ordre
                ')->setParameter("key", $iduser);
        }
        else{
		$query = $this->_em->createQuery(
                'SELECT t, g, a
                FROM ByExampleRecommandationsBundle:Test t
                LEFT JOIN t.idgroup g
                LEFT JOIN g.idalgorithm a
                WHERE t.datefin is NULL
                ');
        }
        $test = $query->getResult(Query::HYDRATE_ARRAY);

        return $test;
	}

	public function closeTest($idtest = false){
        if($idtest){
            $test = $this->findOneById($idtest);
        }
        else{
            $test = $this->findOneBy(array("datefin"=>null));
        }
		
		if($test){
			$test->setDatefin(new DateTime());
		  $this->_em->persist($test);
		  $this->_em->flush();
        return true;
		}
        return false;
		
	}




}
