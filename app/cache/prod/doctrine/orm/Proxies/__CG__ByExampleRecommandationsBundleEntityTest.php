<?php

namespace Proxies\__CG__\ByExample\RecommandationsBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Test extends \ByExample\RecommandationsBundle\Entity\Test implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getLabel()
    {
        $this->__load();
        return parent::getLabel();
    }

    public function setLabel($label)
    {
        $this->__load();
        return parent::setLabel($label);
    }

    public function addIdgroup(\ByExample\RecommandationsBundle\Entity\Group $idgroup)
    {
        $this->__load();
        return parent::addIdgroup($idgroup);
    }

    public function removeIdgroup(\ByExample\RecommandationsBundle\Entity\Group $idgroup)
    {
        $this->__load();
        return parent::removeIdgroup($idgroup);
    }

    public function getIdgroup()
    {
        $this->__load();
        return parent::getIdgroup();
    }

    public function getMode()
    {
        $this->__load();
        return parent::getMode();
    }

    public function setMode($mode)
    {
        $this->__load();
        return parent::setMode($mode);
    }

    public function getGroups()
    {
        $this->__load();
        return parent::getGroups();
    }

    public function setGroups($groups)
    {
        $this->__load();
        return parent::setGroups($groups);
    }

    public function setDatedebut($datedebut)
    {
        $this->__load();
        return parent::setDatedebut($datedebut);
    }

    public function getDatedebut()
    {
        $this->__load();
        return parent::getDatedebut();
    }

    public function setDatefin($datefin)
    {
        $this->__load();
        return parent::setDatefin($datefin);
    }

    public function getDatefin()
    {
        $this->__load();
        return parent::getDatefin();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'datedebut', 'datefin', 'label', 'mode', 'groups', 'idgroup', 'idordre');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}